// Generated by CoffeeScript 1.6.3
(function() {
  var Skinnyjs;

  module.exports = Skinnyjs = (function() {
    function Skinnyjs(cfg) {
      var key, value, _ref;
      this.cfg = cfg;
      this.path = require('path');
      this._ = require('underscore');
      this.fs = require('fs');
      if (this.cfg == null) {
        this.cfg = {};
      }
      if (this.cfg.port == null) {
        this.cfg.port = 9000;
      }
      if (this.cfg.reload == null) {
        this.cfg.reload = true;
      }
      if (this.cfg.db == null) {
        this.cfg.db = '127.0.0.1:27017';
      }
      if (this.cfg.path == null) {
        this.cfg.path = this.path.normalize(process.cwd());
      }
      if (this.cfg.project == null) {
        this.cfg.project = this.cfg.path.split(this.path.sep).splice(-1)[0];
      }
      if (this.cfg.layout == null) {
        this.cfg.layout = {
          app: '/app',
          configs: '/cfg',
          models: '/app/models',
          views: '/app/views',
          controllers: '/app/controllers',
          assets: '/app/assets'
        };
      }
      _ref = this.cfg.layout;
      for (key in _ref) {
        value = _ref[key];
        this.cfg.layout[key] = this.path.normalize(this.cfg.path + this.cfg.layout[key]);
      }
      this.colors = {
        red: "\u001b[31m",
        blue: "\u001b[34m",
        green: "\u001b[32m",
        cyan: "\u001b[36m",
        reset: "\u001b[0m"
      };
      this.db = false;
      this.controllers = {};
      this.models = {};
      this.routes = {};
      this.configs = {};
      this.compiler = {};
    }

    Skinnyjs.prototype.initModule = function(type, opts) {
      if (opts.path == null) {
        return {};
      } else {
        this.path.normalize(opts.path);
      }
      if (this.path.extname(opts.path) !== ".js") {
        return;
      }
      if (opts.force != null) {
        delete require.cache[require.resolve(opts.path)];
      }
      return this[type][opts.name || opts.path.split(this.path.sep).splice(-1)[0].replace('.js', '')] = require(this.path.normalize(opts.path))(this, opts);
    };

    Skinnyjs.prototype.init = function() {
      var watch, watchAction,
        _this = this;
      this.express = require('express');
      this.server = this.express();
      this.server.use('/views', this.express["static"](this.cfg.layout.views));
      this.server.use('/assets', this.express["static"](this.cfg.layout.assets));
      this.server.use(this.express.json());
      this.httpd = require('http').createServer(this.server);
      this.httpd.listen(this.cfg.port);
      this.io = require('socket.io').listen(this.httpd, {
        log: false
      });
      require('mongodb').MongoClient.connect('mongodb://' + this.cfg.db + '/' + this.cfg.project, function(err, db) {
        _this.db = db;
        if (err) {
          return console.log(_this.colors.red + 'MongoDB error:' + _this.colors.reset, err);
        }
      });
      ['configs', 'controllers', 'models'].forEach(function(moduleType) {
        return _this.fs.readdir(_this.cfg.layout[moduleType], function(err, modules) {
          return modules.forEach(function(path) {
            return _this.initModule(moduleType, {
              path: _this.cfg.layout[moduleType] + _this.path.sep + path
            });
          });
        });
      });
      if (this.cfg.reload) {
        watch = require('node-watch');
        watchAction = function(file) {
          var ext;
          if (_this.fs.lstatSync(file).isDirectory()) {
            return;
          }
          ext = _this.path.extname(file);
          if ((ext === '.tmp' || ext === '.swp') || file.match(_this.path.sep + '.git')) {
            return;
          }
          if ((_this.compiler != null) && _this.compiler[ext]) {
            return _this.compiler[ext](file);
          }
          _this.initModule(file.split(_this.path.sep).splice(-2)[0], {
            path: file,
            force: true
          });
          console.log(_this.colors.cyan + 'Reloading browser for:' + _this.colors.reset, file.replace(_this.cfg.path, ''));
          return _this.io.sockets.emit('__reload', {
            delay: 0
          });
        };
        watch(this.cfg.layout.app, function(file) {
          return watchAction(file);
        });
        return watch(this.cfg.layout.configs, function(file) {
          return watchAction(file);
        });
      }
    };

    Skinnyjs.prototype.install = function() {
      var dirName, _i, _len, _ref, _results;
      _ref = ['/cfg', '/app'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dirName = _ref[_i];
        _results.push(require('ncp').ncp(__dirname + dirName, this.cfg.path + dirName, function(err) {
          if (err) {
            return console.log(err);
          }
        }));
      }
      return _results;
    };

    return Skinnyjs;

  })();

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var asset, fs, path, rimraf, should, skinnyjs, testdir, tests;

  asset = require('assert');

  path = require('path');

  fs = require('fs');

  should = require('should');

  rimraf = require('rimraf');

  if (path.sep === '/') {
    skinnyjs = require(__dirname + '/../lib/skinny.js');
  } else {
    skinnyjs = require('c:\\Users\\eru\\Documents\\GitHub\\skinnyjs\\lib\\skinny.js');
  }

  testdir = path.dirname(__filename) + path.sep + '__skinnyTest';

  tests = function() {
    var skinny;
    fs.mkdirSync(testdir);
    skinny = new skinnyjs({
      port: 9001,
      reload: true,
      path: testdir,
      env: 'test'
    });
    return describe("skinny", function() {
      return describe(".install()", function() {
        return it("should install correctly", function(installComplete) {
          return skinny.install(testdir, function() {
            installComplete();
            return describe("skinny", function() {
              return describe(".init()", function() {
                return it("should boot correctly", function(initComplete) {
                  return skinny.init(function(app) {
                    app.server.use(app.express.urlencoded());
                    app.server.use('/assets', app.express["static"](app.cfg.layout.assets));
                    initComplete();
                    describe("app", function() {
                      return describe(".initModel()", function() {
                        return it("should get correct functionality appended", function(initModelComplete) {
                          var test;
                          test = app.initModel({
                            _id: '__skinnyTest'
                          }, '__test');
                          initModelComplete();
                          describe("models", function() {
                            return it("should create instances without error", function(instanceCreateComplete) {
                              var instance;
                              instance = test["new"]();
                              instanceCreateComplete();
                              return describe("model instances", function() {
                                return it("should save without error", function(instanceSaveComplete) {
                                  return instance.save(function() {
                                    instanceSaveComplete();
                                    return describe("model instances", function() {
                                      return it("should delete without error", function(instanceDeleteComplete) {
                                        return instance.remove(function() {
                                          return instanceDeleteComplete();
                                        });
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                          return describe("models", function() {
                            return describe(".find()", function() {
                              return it("should find without error", function(findComplete) {
                                return test.find(function(results) {
                                  return findComplete();
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                    describe(".parseRoutes()", function() {
                      return it("should save routes without error", function(parseRoutesTestComplete) {
                        app.routes = {
                          '/__test': {
                            controller: '__test',
                            action: '__test1'
                          }
                        };
                        app.parseRoutes();
                        return parseRoutesTestComplete();
                      });
                    });
                    return describe("controllers", function() {
                      return it("should create without issue", function(controllerCreateTest) {
                        var testControllerJS, testControllerPath;
                        testControllerPath = testdir + path.sep + 'app' + path.sep + 'controllers' + path.sep + '__test.js';
                        testControllerJS = 'modules.export = { "__test1": function() { return "__testData"; } };';
                        fs.writeFileSync(testControllerPath, testControllerJS);
                        return controllerCreateTest();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  };

  after(function(done) {
    return rimraf(testdir, function() {
      return done();
    });
  });

  if (fs.existsSync(testdir)) {
    throw new Error('test dir exists, exiting');
  } else {
    tests();
  }

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var Skinnyjs,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = Skinnyjs = (function() {
    function Skinnyjs(cfg) {
      var key, value, _ref;
      this.cfg = cfg;
      this.path = require('path');
      this._ = require('underscore');
      this.fs = require('fs');
      if (this.cfg == null) {
        this.cfg = {};
      }
      if (this.cfg.port == null) {
        this.cfg.port = 9000;
      }
      if (this.cfg.reload == null) {
        this.cfg.reload = true;
      }
      if (this.cfg.db == null) {
        this.cfg.db = '127.0.0.1:27017';
      }
      if (this.cfg.path == null) {
        this.cfg.path = this.path.normalize(process.cwd());
      }
      if (this.cfg.project == null) {
        this.cfg.project = this.cfg.path.split(this.path.sep).splice(-1)[0];
      }
      if (this.cfg.layout == null) {
        this.cfg.layout = {
          app: '/app',
          configs: '/configs',
          models: '/app/models',
          views: '/app/views',
          controllers: '/app/controllers',
          assets: '/app/client'
        };
      }
      _ref = this.cfg.layout;
      for (key in _ref) {
        value = _ref[key];
        this.cfg.layout[key] = this.path.normalize(this.cfg.path + this.cfg.layout[key]);
      }
      this.cfg.moduleTypes = ['configs', 'controllers', 'models'];
      this.clr = {
        red: "\u001b[31m",
        blue: "\u001b[34m",
        green: "\u001b[32m",
        cyan: "\u001b[36m",
        reset: "\u001b[0m"
      };
      this.db = false;
      this.controllers = {};
      this.models = {};
      this.routes = {};
      this.configs = {};
      this.compiler = {};
      this.cache = {};
    }

    Skinnyjs.prototype.initModel = function(model, name) {
      var skinny;
      if (typeof model.prototype === void 0) {
        return model;
      } else {
        skinny = this;
      }
      if (model.find == null) {
        model.find = function(query, cb) {
          return skinny.db.collection(name).find(query).toArray((function(_this) {
            return function(err, results) {
              results.forEach(function(result) {
                skinny._.each(model, function(value, key) {
                  if (key !== 'db' && key !== 'find') {
                    return result[key] = value;
                  }
                });
                if (result.save == null) {
                  return result.save = function(cb) {
                    return skinny.db.collection(name).insert(this, function() {
                      if (cb != null) {
                        return cb();
                      }
                    });
                  };
                }
              });
              return cb(results);
            };
          })(this));
        };
      }
      if (model["new"] == null) {
        model["new"] = function() {
          return this;
        };
      }
      if (model.remove == null) {
        model.remove = function(query, cb) {
          if (typeof query === 'function') {
            cb = query;
            query = {};
          }
          return skinny.db.collection(name).remove(query, function() {
            if (cb != null) {
              return cb();
            }
          });
        };
      }
      if (model.collection == null) {
        model.collection = this.db.collection(name);
      }
      return model;
    };

    Skinnyjs.prototype.initModule = function(type, opts) {
      var error;
      if (opts.path == null) {
        return false;
      } else {
        this.path.normalize(opts.path);
      }
      if (!opts.path.match(/\.js$/ || opts.path.match(/\/assets\//))) {
        return true;
      }
      if (opts.path.match(/\/client\//)) {
        return true;
      }
      if (__indexOf.call(this.cfg.moduleTypes, type) < 0) {
        console.log(this.clr.cyan + 'Unhandled change on:' + this.clr.reset, opts.path, this.clr.cyan + "you may want to restart Skinny" + this.clr.reset);
        return false;
      }
      opts.name = opts.name != null ? opts.name : opts.path.split(this.path.sep).splice(-1)[0].replace('.js', '');
      if (opts.force != null) {
        delete require.cache[require.resolve(opts.path)];
        delete this[type][opts.name];
      }
      try {
        this[type][opts.name] = require(this.path.normalize(opts.path))(this, opts);
      } catch (_error) {
        error = _error;
        return this.error(error, {
          type: type,
          error: 'initModuleException',
          opts: opts
        });
      }
      if (type === "models") {
        return this[type][opts.name] = this.initModel(this[type][opts.name], opts.name);
      }
    };

    Skinnyjs.prototype.error = function(error, opts) {
      this.io.sockets.emit('__skinnyjs', {
        error: {
          message: error.message,
          raw: error.toString(),
          module: opts
        }
      });
      return console.log(this.clr.red + 'Exception! ->', "\n" + this.clr.cyan + "Skinny details:" + this.clr.reset, opts, "\n" + this.clr.cyan + "stack:" + this.clr.reset, error.stack);
    };

    Skinnyjs.prototype.init = function(cb) {
      this.express = require('express');
      this.server = this.express();
      this.server.use(this.express.json());
      this.httpd = require('http').createServer(this.server);
      this.httpd.listen(this.cfg.port);
      this.io = require('socket.io').listen(this.httpd, {
        log: false
      });
      this.mongo = require('mongodb');
      this.mongo.MongoClient.connect('mongodb://' + this.cfg.db + '/' + this.cfg.project, (function(_this) {
        return function(err, db) {
          var moduleType, _i, _len, _ref;
          if (err) {
            return console.log(_this.clr.red + 'MongoDB error:' + _this.clr.reset, err);
          } else {
            _this.db = db;
          }
          _ref = _this.cfg.moduleTypes;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            moduleType = _ref[_i];
            _this.fs.readdirSync(_this.cfg.layout[moduleType]).forEach(function(path) {
              if (_this.fileMatch(path)) {
                return _this.initModule(moduleType, {
                  path: _this.cfg.layout[moduleType] + _this.path.sep + path
                });
              }
            });
          }
          return setTimeout(function() {
            if (cb != null) {
              return cb();
            }
          }, 50);
        };
      })(this));
      if (this.cfg.reload) {
        this.watch = require('node-watch');
        this.watch(this.cfg.layout.app, (function(_this) {
          return function(file) {
            return _this.fileChangeEvent(file);
          };
        })(this));
        return this.watch(this.cfg.layout.configs, (function(_this) {
          return function(file) {
            return _this.fileChangeEvent(file);
          };
        })(this));
      }
    };

    Skinnyjs.prototype.fileMatch = function(file) {
      if (file.match(/\/\.git|\.swp$|\.tmp$/)) {
        return false;
      } else {
        return true;
      }
    };

    Skinnyjs.prototype.fileChangeEvent = function(file) {
      var compile, exists;
      if (this.fileMatch(file)) {
        if (exists = this.fs.existsSync(file)) {
          if (this.fs.lstatSync(file).isDirectory()) {
            return false;
          }
          if (compile = this.compiler[this.path.extname(file)]) {
            return compile(file);
          }
        } else {
          console.log('unload test - cache:', this.cache, 'file path:', file);
          if (this.cache[file] != null) {
            delete this.cache[file];
          }
        }
        if (this.initModule(file.split(this.path.sep).splice(-2)[0], {
          path: file,
          force: true,
          clear: !exists
        })) {
          console.log(this.clr.cyan + 'Reloading browser for:' + this.clr.reset, file.replace(this.cfg.path, ''));
          return this.io.sockets.emit('__skinnyjs', {
            reload: {
              delay: 0
            }
          });
        }
      }
    };

    Skinnyjs.prototype.install = function(target) {
      if (target == null) {
        target = this.cfg.path + dirName;
      }
      if (!this.fs.existsSync(target)) {
        this.fs.mkdirSync(target);
      }
      return require('ncp').ncp(__dirname + '/templateProject', target, function(err) {
        if (err) {
          return console.log(err);
        }
      });
    };

    Skinnyjs.prototype.parseRoutes = function() {
      return this._.each(this.routes, (function(_this) {
        return function(obj, route) {
          return _this.server[obj.method || 'get'](route, function(req, res) {
            var controllerOutput, error;
            if (_this.controllers[obj.controller] != null) {
              if (_this.controllers[obj.controller]['*'] != null) {
                _this.controllers[obj.controller]['*'](req, res);
              }
            }
            console.log('(' + req.connection.remoteAddress + ')', _this.clr.cyan + req.method + ':' + _this.clr.reset, req.url, obj.controller + '#' + obj.action);
            res.view = _this.cfg.layout.views + '/' + obj.controller + '/' + obj.action + '.html';
            if ((_this.controllers[obj.controller] != null) && (_this.controllers[obj.controller][obj.action] != null)) {
              try {
                controllerOutput = _this.controllers[obj.controller][obj.action](req, res);
              } catch (_error) {
                error = _error;
                _this.error(error, {
                  error: 'controllerException',
                  view: res.view
                });
              }
              if (controllerOutput != null) {
                if (res.headersSent) {
                  return;
                }
                if (typeof controllerOutput === "object") {
                  controllerOutput = JSON.stringify(controllerOutput);
                }
                if (controllerOutput != null) {
                  return res.send(controllerOutput);
                }
              }
            }
            if (_this.cache[res.view] == null) {
              _this.cache[res.view] = _this.fs.existsSync(res.view);
            }
            if (_this.cache[res.view]) {
              return res.sendfile(res.view);
            } else {
              return res.send('404');
            }
          });
        };
      })(this));
    };

    return Skinnyjs;

  })();

}).call(this);

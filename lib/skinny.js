// Generated by CoffeeScript 1.6.3
(function() {
  var Skinnyjs;

  module.exports = Skinnyjs = (function() {
    function Skinnyjs(cfg) {
      var key, value, _ref;
      this.cfg = cfg;
      this.path = require('path');
      this._ = require('underscore');
      this.fs = require('fs');
      if (this.cfg == null) {
        this.cfg = {};
      }
      if (this.cfg.port == null) {
        this.cfg.port = 9000;
      }
      if (this.cfg.reload == null) {
        this.cfg.reload = true;
      }
      if (this.cfg.db == null) {
        this.cfg.db = '127.0.0.1:27017';
      }
      if (this.cfg.path == null) {
        this.cfg.path = this.path.normalize(process.cwd());
      }
      if (this.cfg.project == null) {
        this.cfg.project = this.cfg.path.split(this.path.sep).splice(-1)[0];
      }
      if (this.cfg.layout == null) {
        this.cfg.layout = {
          app: '/app',
          configs: '/cfg',
          models: '/app/models',
          views: '/app/views',
          controllers: '/app/controllers',
          assets: '/app/assets'
        };
      }
      _ref = this.cfg.layout;
      for (key in _ref) {
        value = _ref[key];
        this.cfg.layout[key] = this.path.normalize(this.cfg.path + this.cfg.layout[key]);
      }
      this.colors = {
        red: "\u001b[31m",
        blue: "\u001b[34m",
        green: "\u001b[32m",
        cyan: "\u001b[36m",
        reset: "\u001b[0m"
      };
      this.db = false;
      this.controllers = {};
      this.models = {};
      this.routes = {};
      this.configs = {};
      this.compiler = {};
    }

    Skinnyjs.prototype.initModule = function(type, opts) {
      var error;
      if (opts.path == null) {
        return false;
      } else {
        this.path.normalize(opts.path);
      }
      opts.name = opts.name != null ? opts.name : opts.path.split(this.path.sep).splice(-1)[0].replace('.js', '');
      if (opts.force != null) {
        delete require.cache[require.resolve(opts.path)];
        delete this[type][opts.name];
      }
      try {
        this[type][opts.name] = require(this.path.normalize(opts.path))(this, opts);
      } catch (_error) {
        error = _error;
        return this.error(error, {
          type: type,
          error: 'initModuleException',
          opts: opts
        });
      }
      if (type === "models") {
        this[type][opts.name] = this.initModel(this[type][opts.name], opts.name);
      }
      return true;
    };

    Skinnyjs.prototype.initModel = function(model, name) {
      if (typeof model.prototype === void 0) {
        return model;
      }
      model.prototype.name = name;
      model.prototype.db = this.db.collection(name);
      model.prototype.save = function(cb) {
        var _this = this;
        return this.db.insert(this, function() {
          if (cb != null) {
            return cb();
          }
        });
      };
      return model;
    };

    Skinnyjs.prototype.error = function(error, opts) {
      this.io.sockets.emit('__skinnyjs', {
        error: {
          message: error.message,
          raw: error.toString(),
          module: opts
        }
      });
      return console.log(this.colors.red + 'Exception' + this.colors.reset, 'on:', opts, 'error:', error.message, error.toString());
    };

    Skinnyjs.prototype.init = function() {
      var _this = this;
      this.express = require('express');
      this.server = this.express();
      this.server.use(this.express.compress());
      this.server.use(this.express.json());
      this.server.use('/views', this.express["static"](this.cfg.layout.views));
      this.server.use('/assets', this.express["static"](this.cfg.layout.assets));
      this.httpd = require('http').createServer(this.server);
      this.httpd.listen(this.cfg.port);
      this.io = require('socket.io').listen(this.httpd, {
        log: false
      });
      this.mongo = require('mongodb');
      this.mongo.MongoClient.connect('mongodb://' + this.cfg.db + '/' + this.cfg.project, function(err, db) {
        var moduleType, _i, _len, _ref, _results;
        if (err) {
          return console.log(_this.colors.red + 'MongoDB error:' + _this.colors.reset, err);
        } else {
          _this.db = db;
        }
        _ref = ['configs', 'controllers', 'models'];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          moduleType = _ref[_i];
          _results.push(_this.fs.readdirSync(_this.cfg.layout[moduleType]).forEach(function(path) {
            if (_this.fileMatch(path)) {
              return _this.initModule(moduleType, {
                path: _this.cfg.layout[moduleType] + _this.path.sep + path
              });
            }
          }));
        }
        return _results;
      });
      if (this.cfg.reload) {
        this.watch = require('node-watch');
        this.watch(this.cfg.layout.app, function(file) {
          return _this.fileChangeEvent(file);
        });
        return this.watch(this.cfg.layout.configs, function(file) {
          return _this.fileChangeEvent(file);
        });
      }
    };

    Skinnyjs.prototype.fileMatch = function(file) {
      if (file.match(/\/\.git|\.swp$|\/assets\//)) {
        return false;
      }
      if (!file.match(/\.js$/)) {
        return false;
      } else {
        return true;
      }
    };

    Skinnyjs.prototype.fileChangeEvent = function(file) {
      var compile, exists;
      if (this.fileMatch(file)) {
        if (exists = this.fs.existsSync(file)) {
          if (this.fs.lstatSync(file).isDirectory()) {
            return false;
          }
          if (compile = this.compiler[this.path.extname(file)]) {
            return compile(file);
          }
        }
        if (this.initModule(file.split(this.path.sep).splice(-2)[0], {
          path: file,
          force: true,
          clear: !exists
        })) {
          console.log(this.colors.cyan + 'Reloading browser for:' + this.colors.reset, file.replace(this.cfg.path, ''));
          return this.io.sockets.emit('__skinnyjs', {
            reload: {
              delay: 0
            }
          });
        }
      }
    };

    Skinnyjs.prototype.install = function(target) {
      if (target == null) {
        target = this.cfg.path + dirName;
      }
      if (!this.fs.existsSync(target)) {
        this.fs.mkdirSync(target);
      }
      return require('ncp').ncp(__dirname + '/templateProject', target, function(err) {
        if (err) {
          return console.log(err);
        }
      });
    };

    Skinnyjs.prototype.parseRoutes = function() {
      return app._.each(app.routes, function(obj, route) {
        return app.server[obj.method || 'get'](route, function(req, res) {
          var controllerOutput, error;
          if (app.controllers[obj.controller] != null ? app.controllers[obj.controller]['*'] != null : void 0) {
            app.controllers[obj.controller]['*'](req, res);
          }
          console.log('(' + req.connection.remoteAddress + ')', app.colors.cyan + req.method + ':' + app.colors.reset, req.url, obj.controller + '#' + obj.action);
          res.view = app.cfg.layout.views + '/' + obj.controller + '/' + obj.action + '.html';
          try {
            if (app.controllers[obj.controller] != null ? app.controllers[obj.controller][obj.action] != null : void 0) {
              controllerOutput = app.controllers[obj.controller][obj.action](req, res);
            }
          } catch (_error) {
            error = _error;
            this.error(error, {
              error: 'controllerException',
              view: res.view
            });
          }
          if (controllerOutput != null) {
            if (res.headersSent) {
              return;
            }
            if (typeof controllerOutput === "object") {
              controllerOutput = JSON.stringify(controllerOutput);
            }
            if (controllerOutput != null) {
              return res.send(controllerOutput);
            }
          } else if (this.fs.existsSync(res.view)) {
            return res.sendfile(res.view);
          } else {
            return res.send('404');
          }
        });
      });
    };

    return Skinnyjs;

  })();

}).call(this);

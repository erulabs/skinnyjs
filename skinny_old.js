// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var Skinnyjs, coffee, colors, fs, http, mongo, path, sass, watch, _;

  fs = require('fs');

  http = require('http');

  path = require('path');

  mongo = require('mongodb').MongoClient;

  _ = require('underscore');

  watch = require('node-watch');

  coffee = require('coffee-script');

  sass = require('node-sass');

  colors = {
    red: "\u001b[31m",
    blue: "\u001b[34m",
    green: "\u001b[32m",
    cyan: "\u001b[36m",
    reset: "\u001b[0m"
  };

  module.exports = Skinnyjs = (function() {
    function Skinnyjs(cfg) {
      this.cfg = cfg;
      if (this.cfg == null) {
        this.cfg = {};
      }
      if (this.cfg.port == null) {
        this.cfg.port = 9000;
      }
      if (this.cfg.reload == null) {
        this.cfg.reload = true;
      }
      if (this.cfg.path == null) {
        this.cfg.path = process.cwd();
      }
      if (this.cfg.db == null) {
        this.cfg.db = '127.0.0.1:27017';
      }
      if (this.cfg.project == null) {
        this.cfg.project = this.cfg.path.split('/').splice(-1)[0];
      }
      if (this.cfg.layout == null) {
        this.cfg.layout = {};
      }
      if (this.cfg.layout.app == null) {
        this.cfg.layout.app = this.cfg.path + '/app';
      }
      if (this.cfg.layout.cfg == null) {
        this.cfg.layout.cfg = this.cfg.path + '/cfg';
      }
      if (this.cfg.layout.models == null) {
        this.cfg.layout.models = this.cfg.layout.app + '/models';
      }
      if (this.cfg.layout.views == null) {
        this.cfg.layout.views = this.cfg.layout.app + '/views';
      }
      if (this.cfg.layout.controllers == null) {
        this.cfg.layout.controllers = this.cfg.layout.app + '/controllers';
      }
      if (this.cfg.layout.assets == null) {
        this.cfg.layout.assets = this.cfg.layout.app + '/assets';
      }
      this.db = false;
      this.controllers = {};
      this.models = {};
      this.routes = {};
    }

    Skinnyjs.prototype.Model = function(skinny, name, model) {
      var collection, instance;
      instance = model(skinny);
      collection = skinny.db.collection(name);
      instance.prototype.find = function(opts) {
        return collection.find(opts);
      };
      instance.prototype.all = function(cb) {
        return collection.find().toArray(function(err, instances) {
          if (err) {
            console.log('MongoDB error on ' + name + '.all():', err);
          }
          return cb(instances);
        });
      };
      return instance;
    };

    Skinnyjs.prototype.init = function(cb) {
      var lazyLoad,
        _this = this;
      lazyLoad = 0;
      fs.readdir(this.cfg.layout.controllers, function(err, controllers) {
        return controllers.forEach(function(controllerPath) {
          if (!_this.initController(controllerPath)) {
            return;
          }
          if (++lazyLoad === 2) {
            return cb();
          }
        });
      });
      return fs.readdir(this.cfg.layout.models, function(err, models) {
        return models.forEach(function(modelPath) {
          if (!_this.initModel(modelPath)) {
            return;
          }
          if (++lazyLoad === 2) {
            return cb();
          }
        });
      });
    };

    Skinnyjs.prototype.initController = function(controllerPath) {
      var controller, name;
      if (controllerPath.substr(-3) !== '.js') {
        return false;
      }
      name = controllerPath.replace('.js', '');
      controller = require(this.cfg.layout.controllers + '/' + controllerPath);
      if (this.controllers[name] != null) {
        delete require.cache[require.resolve(this.cfg.layout.controllers + '/' + controllerPath)];
      }
      return this.controllers[name] = controller(this);
    };

    Skinnyjs.prototype.initModel = function(modelPath) {
      var model, name;
      if (modelPath.substr(-3) !== '.js') {
        return false;
      }
      name = modelPath.replace('.js', '');
      model = require(this.cfg.layout.models + '/' + modelPath);
      return this.models[name] = new this.Model(this, name, model);
    };

    Skinnyjs.prototype.server = function() {
      var overrides,
        _this = this;
      this.express = require('express');
      this.socketio = require('socket.io');
      this.web = this.express();
      this.web.use('/views', this.express["static"](this.cfg.layout.views));
      this.web.use('/assets', this.express["static"](this.cfg.layout.assets));
      this.web.use(this.express.json());
      this.httpd = http.createServer(this.web);
      this.routes = require(this.cfg.layout.cfg + '/routes.js');
      overrides = require(this.cfg.layout.cfg + '/application.js')(this);
      this.web.set('port', this.cfg.port);
      if (this.cfg.reload) {
        this.autoreload();
      }
      this.httpd.listen(this.cfg.port);
      this.io = this.socketio.listen(this.httpd, {
        log: false
      });
      return mongo.connect('mongodb://' + this.cfg.db + '/' + this.cfg.project, function(err, db) {
        _this.db = db;
        if (err) {
          return console.log('MongoDB error:', err);
        }
        return _this.init(function() {
          return _this.parseRoutes();
        });
      });
    };

    Skinnyjs.prototype.parseRoutes = function() {
      var _this = this;
      return _.each(this.routes, function(value, key) {
        var action, controller, method, route;
        method = 'get';
        if (typeof value === 'string') {
          controller = value.split('#')[0];
          action = value.split('#')[1];
        } else if (typeof value === 'object') {
          controller = value.controller;
          action = value.action;
          if (value.method != null) {
            method = value.method;
          }
        }
        route = true;
        if ((_this.controllers[controller] == null) || (_this.controllers[controller][action] == null)) {
          route = false;
        }
        if ((_this.controllers[controller] != null) && (_this.controllers[controller]['*'] != null)) {
          _this.controllers[controller]['*']();
        }
        return _this.web[method](key, function(req, res) {
          var ctrlTactic;
          console.log('(' + req.connection.remoteAddress + ')', colors.cyan + req.method + colors.reset + ':', req.url, colors.cyan + '->' + colors.reset, controller + '#' + action);
          res.view = _this.cfg.layout.views + '/' + controller + '/' + action + '.html';
          if (route) {
            ctrlTactic = _this.controllers[controller][action](req, res);
          }
          if (!route) {
            console.log('No route for', controller + '#' + action, ' Controllers:', _this.controllers);
          }
          if (res.headersSent) {
            return;
          }
          if (ctrlTactic == null) {
            return res.sendfile(res.view);
          }
          if (!ctrlTactic) {
            return;
          }
          if (typeof ctrlTactic === "object") {
            ctrlTactic = JSON.stringify(ctrlTactic);
          }
          return res.send(ctrlTactic);
        });
      });
    };

    Skinnyjs.prototype.autoreload = function() {
      var _this = this;
      return watch(this.cfg.path, function(file) {
        if (path.extname(file) === '.tmp' || path.extname(file) === '.swp' || file.match('/.git/')) {
          return true;
        }
        return _this.compileAsset(file, function() {
          if (file.match('/controllers/')) {
            _this.initController(file.replace(_this.cfg.layout.controllers + '/', ''));
          }
          if (file.match('/cfg/')) {
            delete require.cache[require.resolve(file)];
            _this.server();
          }
          console.log(colors.cyan + 'Browser reloading:' + colors.reset, file.replace(_this.cfg.path, ''));
          return _this.io.sockets.emit('__reload', {
            delay: 0
          });
        });
      });
    };

    Skinnyjs.prototype.compileAsset = function(file, cb) {
      var _this = this;
      if (file.substr(-7) === '.coffee') {
        return fs.readFile(file, 'utf8', function(err, rawCode) {
          var cs, error;
          if (err) {
            console.log(colors.red + 'compileAsset() error:' + colors.reset, err);
          }
          console.log(colors.cyan + 'CoffeeScript:' + colors.reset, file.replace(_this.cfg.path, ''));
          try {
            cs = coffee.compile(rawCode);
          } catch (_error) {
            error = _error;
            return console.log(colors.red + 'CoffeeScript error:' + colors.reset, file.replace(_this.cfg.path, '') + ':', error.message, "on lines:", error.location.first_line + '-' + error.location.last_line);
          }
          if (error == null) {
            return fs.writeFile(file.replace('.coffee', '.js'), cs, function(err) {
              if (err) {
                return console.log(colors.red + 'autocompile write error! file' + colors.reset, file.replace('.coffee', '.js'), 'error:', err);
              }
            });
          }
        });
      } else if (file.substr(-5) === '.scss') {
        return sass.render({
          file: file,
          success: function(css) {
            return fs.writeFile(file.replace('.scss', '.css'), css, function(err) {
              if (err) {
                return console.log(colors.red + 'autocompile write error! file' + colors.reset, file.replace('.scss', '.css'), 'error:', err);
              }
            });
          },
          error: function(error) {
            return console.log('SCSS Compile error:', error);
          }
        });
      } else {
        return cb();
      }
    };

    Skinnyjs.prototype.install = function() {
      var component, fsCalls, _ref, _results,
        _this = this;
      fsCalls = 0;
      _ref = this.cfg.layout;
      _results = [];
      for (component in _ref) {
        path = _ref[component];
        fsCalls++;
        _results.push(fs.mkdir(path, function(err) {
          if (err) {
            return console.log(err);
          }
          if (--fsCalls === 0) {
            return fs.mkdir(_this.cfg.path + '/app/views/home', function(err) {
              if (err) {
                return console.log(err);
              }
              return _this.installTemplates();
            });
          }
        }));
      }
      return _results;
    };

    Skinnyjs.prototype.installTemplates = function() {
      var templates,
        _this = this;
      templates = ['/cfg/routes.js', '/cfg/application.js', '/app/server.js', '/app/views/home/home.html', '/app/controllers/home.js', '/app/models/thing.js', '/app/assets/socket.io.min.js', '/app/assets/reload.js'];
      return templates.forEach(function(template) {
        return fs.createReadStream(__dirname + template).pipe(fs.createWriteStream(_this.cfg.path + template));
      });
    };

    return Skinnyjs;

  })();

}).call(this);
